// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockconverter

import (
	store "github.com/infevocorp/goflexstore/store"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter[Entity store.Entity[ID], DTO store.Entity[ID], ID comparable] struct {
	mock.Mock
}

type Converter_Expecter[Entity store.Entity[ID], DTO store.Entity[ID], ID comparable] struct {
	mock *mock.Mock
}

func (_m *Converter[Entity, DTO, ID]) EXPECT() *Converter_Expecter[Entity, DTO, ID] {
	return &Converter_Expecter[Entity, DTO, ID]{mock: &_m.Mock}
}

// ToDTO provides a mock function with given fields: entity
func (_m *Converter[Entity, DTO, ID]) ToDTO(entity Entity) DTO {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for ToDTO")
	}

	var r0 DTO
	if rf, ok := ret.Get(0).(func(Entity) DTO); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DTO)
		}
	}

	return r0
}

// Converter_ToDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToDTO'
type Converter_ToDTO_Call[Entity store.Entity[ID], DTO store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// ToDTO is a helper method to define mock.On call
//   - entity Entity
func (_e *Converter_Expecter[Entity, DTO, ID]) ToDTO(entity interface{}) *Converter_ToDTO_Call[Entity, DTO, ID] {
	return &Converter_ToDTO_Call[Entity, DTO, ID]{Call: _e.mock.On("ToDTO", entity)}
}

func (_c *Converter_ToDTO_Call[Entity, DTO, ID]) Run(run func(entity Entity)) *Converter_ToDTO_Call[Entity, DTO, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Entity))
	})
	return _c
}

func (_c *Converter_ToDTO_Call[Entity, DTO, ID]) Return(_a0 DTO) *Converter_ToDTO_Call[Entity, DTO, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Converter_ToDTO_Call[Entity, DTO, ID]) RunAndReturn(run func(Entity) DTO) *Converter_ToDTO_Call[Entity, DTO, ID] {
	_c.Call.Return(run)
	return _c
}

// ToEntity provides a mock function with given fields: dto
func (_m *Converter[Entity, DTO, ID]) ToEntity(dto DTO) Entity {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for ToEntity")
	}

	var r0 Entity
	if rf, ok := ret.Get(0).(func(DTO) Entity); ok {
		r0 = rf(dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Entity)
		}
	}

	return r0
}

// Converter_ToEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToEntity'
type Converter_ToEntity_Call[Entity store.Entity[ID], DTO store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// ToEntity is a helper method to define mock.On call
//   - dto DTO
func (_e *Converter_Expecter[Entity, DTO, ID]) ToEntity(dto interface{}) *Converter_ToEntity_Call[Entity, DTO, ID] {
	return &Converter_ToEntity_Call[Entity, DTO, ID]{Call: _e.mock.On("ToEntity", dto)}
}

func (_c *Converter_ToEntity_Call[Entity, DTO, ID]) Run(run func(dto DTO)) *Converter_ToEntity_Call[Entity, DTO, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DTO))
	})
	return _c
}

func (_c *Converter_ToEntity_Call[Entity, DTO, ID]) Return(_a0 Entity) *Converter_ToEntity_Call[Entity, DTO, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Converter_ToEntity_Call[Entity, DTO, ID]) RunAndReturn(run func(DTO) Entity) *Converter_ToEntity_Call[Entity, DTO, ID] {
	_c.Call.Return(run)
	return _c
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverter[Entity store.Entity[ID], DTO store.Entity[ID], ID comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *Converter[Entity, DTO, ID] {
	mock := &Converter[Entity, DTO, ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

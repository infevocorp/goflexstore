// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockstore

import (
	context "context"

	query "github.com/infevocorp/goflexstore/query"
	mock "github.com/stretchr/testify/mock"

	store "github.com/infevocorp/goflexstore/store"
)

// Store is an autogenerated mock type for the Store type
type Store[T store.Entity[ID], ID comparable] struct {
	mock.Mock
}

type Store_Expecter[T store.Entity[ID], ID comparable] struct {
	mock *mock.Mock
}

func (_m *Store[T, ID]) EXPECT() *Store_Expecter[T, ID] {
	return &Store_Expecter[T, ID]{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, params
func (_m *Store[T, ID]) Count(ctx context.Context, params ...query.Param) (int64, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) (int64, error)); ok {
		return rf(ctx, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) int64); ok {
		r0 = rf(ctx, params...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...query.Param) error); ok {
		r1 = rf(ctx, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type Store_Count_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...query.Param
func (_e *Store_Expecter[T, ID]) Count(ctx interface{}, params ...interface{}) *Store_Count_Call[T, ID] {
	return &Store_Count_Call[T, ID]{Call: _e.mock.On("Count",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *Store_Count_Call[T, ID]) Run(run func(ctx context.Context, params ...query.Param)) *Store_Count_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]query.Param, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(query.Param)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Store_Count_Call[T, ID]) Return(_a0 int64, _a1 error) *Store_Count_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Count_Call[T, ID]) RunAndReturn(run func(context.Context, ...query.Param) (int64, error)) *Store_Count_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, entity
func (_m *Store[T, ID]) Create(ctx context.Context, entity T) (ID, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (ID, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) ID); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Store_Create_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
func (_e *Store_Expecter[T, ID]) Create(ctx interface{}, entity interface{}) *Store_Create_Call[T, ID] {
	return &Store_Create_Call[T, ID]{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *Store_Create_Call[T, ID]) Run(run func(ctx context.Context, entity T)) *Store_Create_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Store_Create_Call[T, ID]) Return(_a0 ID, _a1 error) *Store_Create_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Create_Call[T, ID]) RunAndReturn(run func(context.Context, T) (ID, error)) *Store_Create_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// CreateMany provides a mock function with given fields: ctx, entities
func (_m *Store[T, ID]) CreateMany(ctx context.Context, entities []T) error {
	ret := _m.Called(ctx, entities)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []T) error); ok {
		r0 = rf(ctx, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type Store_CreateMany_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - entities []T
func (_e *Store_Expecter[T, ID]) CreateMany(ctx interface{}, entities interface{}) *Store_CreateMany_Call[T, ID] {
	return &Store_CreateMany_Call[T, ID]{Call: _e.mock.On("CreateMany", ctx, entities)}
}

func (_c *Store_CreateMany_Call[T, ID]) Run(run func(ctx context.Context, entities []T)) *Store_CreateMany_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]T))
	})
	return _c
}

func (_c *Store_CreateMany_Call[T, ID]) Return(_a0 error) *Store_CreateMany_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_CreateMany_Call[T, ID]) RunAndReturn(run func(context.Context, []T) error) *Store_CreateMany_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, params
func (_m *Store[T, ID]) Delete(ctx context.Context, params ...query.Param) error {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) error); ok {
		r0 = rf(ctx, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Store_Delete_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...query.Param
func (_e *Store_Expecter[T, ID]) Delete(ctx interface{}, params ...interface{}) *Store_Delete_Call[T, ID] {
	return &Store_Delete_Call[T, ID]{Call: _e.mock.On("Delete",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *Store_Delete_Call[T, ID]) Run(run func(ctx context.Context, params ...query.Param)) *Store_Delete_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]query.Param, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(query.Param)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Store_Delete_Call[T, ID]) Return(_a0 error) *Store_Delete_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Delete_Call[T, ID]) RunAndReturn(run func(context.Context, ...query.Param) error) *Store_Delete_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, params
func (_m *Store[T, ID]) Exists(ctx context.Context, params ...query.Param) (bool, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) (bool, error)); ok {
		return rf(ctx, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) bool); ok {
		r0 = rf(ctx, params...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...query.Param) error); ok {
		r1 = rf(ctx, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Store_Exists_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...query.Param
func (_e *Store_Expecter[T, ID]) Exists(ctx interface{}, params ...interface{}) *Store_Exists_Call[T, ID] {
	return &Store_Exists_Call[T, ID]{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *Store_Exists_Call[T, ID]) Run(run func(ctx context.Context, params ...query.Param)) *Store_Exists_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]query.Param, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(query.Param)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Store_Exists_Call[T, ID]) Return(_a0 bool, _a1 error) *Store_Exists_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Exists_Call[T, ID]) RunAndReturn(run func(context.Context, ...query.Param) (bool, error)) *Store_Exists_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, params
func (_m *Store[T, ID]) Get(ctx context.Context, params ...query.Param) (T, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) (T, error)); ok {
		return rf(ctx, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) T); ok {
		r0 = rf(ctx, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...query.Param) error); ok {
		r1 = rf(ctx, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Store_Get_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...query.Param
func (_e *Store_Expecter[T, ID]) Get(ctx interface{}, params ...interface{}) *Store_Get_Call[T, ID] {
	return &Store_Get_Call[T, ID]{Call: _e.mock.On("Get",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *Store_Get_Call[T, ID]) Run(run func(ctx context.Context, params ...query.Param)) *Store_Get_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]query.Param, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(query.Param)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Store_Get_Call[T, ID]) Return(_a0 T, _a1 error) *Store_Get_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Get_Call[T, ID]) RunAndReturn(run func(context.Context, ...query.Param) (T, error)) *Store_Get_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, params
func (_m *Store[T, ID]) List(ctx context.Context, params ...query.Param) ([]T, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) ([]T, error)); ok {
		return rf(ctx, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...query.Param) []T); ok {
		r0 = rf(ctx, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...query.Param) error); ok {
		r1 = rf(ctx, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Store_List_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...query.Param
func (_e *Store_Expecter[T, ID]) List(ctx interface{}, params ...interface{}) *Store_List_Call[T, ID] {
	return &Store_List_Call[T, ID]{Call: _e.mock.On("List",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *Store_List_Call[T, ID]) Run(run func(ctx context.Context, params ...query.Param)) *Store_List_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]query.Param, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(query.Param)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Store_List_Call[T, ID]) Return(_a0 []T, _a1 error) *Store_List_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_List_Call[T, ID]) RunAndReturn(run func(context.Context, ...query.Param) ([]T, error)) *Store_List_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// PartialUpdate provides a mock function with given fields: ctx, entity, params
func (_m *Store[T, ID]) PartialUpdate(ctx context.Context, entity T, params ...query.Param) error {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PartialUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T, ...query.Param) error); ok {
		r0 = rf(ctx, entity, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_PartialUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PartialUpdate'
type Store_PartialUpdate_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// PartialUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
//   - params ...query.Param
func (_e *Store_Expecter[T, ID]) PartialUpdate(ctx interface{}, entity interface{}, params ...interface{}) *Store_PartialUpdate_Call[T, ID] {
	return &Store_PartialUpdate_Call[T, ID]{Call: _e.mock.On("PartialUpdate",
		append([]interface{}{ctx, entity}, params...)...)}
}

func (_c *Store_PartialUpdate_Call[T, ID]) Run(run func(ctx context.Context, entity T, params ...query.Param)) *Store_PartialUpdate_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]query.Param, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(query.Param)
			}
		}
		run(args[0].(context.Context), args[1].(T), variadicArgs...)
	})
	return _c
}

func (_c *Store_PartialUpdate_Call[T, ID]) Return(_a0 error) *Store_PartialUpdate_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_PartialUpdate_Call[T, ID]) RunAndReturn(run func(context.Context, T, ...query.Param) error) *Store_PartialUpdate_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, entity, params
func (_m *Store[T, ID]) Update(ctx context.Context, entity T, params ...query.Param) error {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T, ...query.Param) error); ok {
		r0 = rf(ctx, entity, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Store_Update_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
//   - params ...query.Param
func (_e *Store_Expecter[T, ID]) Update(ctx interface{}, entity interface{}, params ...interface{}) *Store_Update_Call[T, ID] {
	return &Store_Update_Call[T, ID]{Call: _e.mock.On("Update",
		append([]interface{}{ctx, entity}, params...)...)}
}

func (_c *Store_Update_Call[T, ID]) Run(run func(ctx context.Context, entity T, params ...query.Param)) *Store_Update_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]query.Param, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(query.Param)
			}
		}
		run(args[0].(context.Context), args[1].(T), variadicArgs...)
	})
	return _c
}

func (_c *Store_Update_Call[T, ID]) Return(_a0 error) *Store_Update_Call[T, ID] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Update_Call[T, ID]) RunAndReturn(run func(context.Context, T, ...query.Param) error) *Store_Update_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, entity, onConflict
func (_m *Store[T, ID]) Upsert(ctx context.Context, entity T, onConflict store.OnConflict) (ID, error) {
	ret := _m.Called(ctx, entity, onConflict)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T, store.OnConflict) (ID, error)); ok {
		return rf(ctx, entity, onConflict)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, store.OnConflict) ID); ok {
		r0 = rf(ctx, entity, onConflict)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, store.OnConflict) error); ok {
		r1 = rf(ctx, entity, onConflict)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type Store_Upsert_Call[T store.Entity[ID], ID comparable] struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
//   - onConflict store.OnConflict
func (_e *Store_Expecter[T, ID]) Upsert(ctx interface{}, entity interface{}, onConflict interface{}) *Store_Upsert_Call[T, ID] {
	return &Store_Upsert_Call[T, ID]{Call: _e.mock.On("Upsert", ctx, entity, onConflict)}
}

func (_c *Store_Upsert_Call[T, ID]) Run(run func(ctx context.Context, entity T, onConflict store.OnConflict)) *Store_Upsert_Call[T, ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T), args[2].(store.OnConflict))
	})
	return _c
}

func (_c *Store_Upsert_Call[T, ID]) Return(_a0 ID, _a1 error) *Store_Upsert_Call[T, ID] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Upsert_Call[T, ID]) RunAndReturn(run func(context.Context, T, store.OnConflict) (ID, error)) *Store_Upsert_Call[T, ID] {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore[T store.Entity[ID], ID comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *Store[T, ID] {
	mock := &Store[T, ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
